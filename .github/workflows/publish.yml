name: Check WeChatFerry Release

on:
  schedule:
    - cron: '0 */6 * * *' # 每6小时检查一次
  workflow_dispatch:

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          npm install -g pnpm jq
          pnpm install

      - name: Get WeChatFerry latest release
        id: get_wcf_release
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/lich0821/WeChatFerry/releases/latest | jq -r '.tag_name')
          echo "wcf_version=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Get current version
        id: get_current_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' packages/core/src/version.json)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: version_check
        run: |
          wcf_ver=${1#v}
          current_ver=${2#v}

          IFS='.' read -ra wcf <<< "$wcf_ver"
          IFS='.' read -ra curr <<< "$current_ver"

          newer=false
          for ((i=0; i<${#wcf[@]}; i++)); do
            if [[ -z "${curr[$i]}" ]]; then curr[$i]=0; fi
            if (( ${wcf[$i]} > ${curr[$i]} )); then
              newer=true
              break
            elif (( ${wcf[$i]} < ${curr[$i]} )); then
              break
            fi
          done

          echo "should_publish=$newer" >> $GITHUB_OUTPUT
        env:
          arg1: ${{ steps.get_wcf_release.outputs.wcf_version }}
          arg2: ${{ steps.get_current_version.outputs.current_version }}

      - name: Publish Packages
        if: steps.version_check.outputs.should_publish == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Configure npm
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

          # Process core package
          cd packages/core
          pnpm run get-wcf
          pnpm run build-proto
          pnpm version patch --no-git-tag-version
          pnpm publish --access public
          cd ../..

          # Process cli package
          cd packages/cli
          pnpm version patch --no-git-tag-version
          pnpm run build
          pnpm publish --access public
          cd ../..

          # Commit and push changes
          git add .
          git commit -m "chore: release new versions (core: $(jq -r .version packages/core/package.json), cli: $(jq -r .version packages/cli/package.json))"
          git push origin main

          # Create tag and push
          CORE_VERSION=$(jq -r .version packages/core/package.json)
          git tag "core@$CORE_VERSION"
          git push origin "core@$CORE_VERSION"
